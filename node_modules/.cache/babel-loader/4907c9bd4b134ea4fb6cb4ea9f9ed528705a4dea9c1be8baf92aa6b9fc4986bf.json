{"ast":null,"code":"import axios from \"axios\";\nconst API_URL = `${process.env.REACT_APP_BACKEND_URL}/api/v1/auth`; // Adjust if backend runs on another port\n\nexport const login = async (email, password) => {\n  try {\n    const response = await axios.post(`${API_URL}/login`, {\n      email,\n      password\n    });\n    if (response.data.token) {\n      localStorage.setItem(\"token\", response.data.token); // Store JWT token\n    }\n    return response.data;\n  } catch (error) {\n    var _error$response;\n    throw new Error(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || \"Login failed\");\n  }\n};\nexport const register = async (name, email, password) => {\n  try {\n    const response = await axios.post(`${API_URL}/register`, {\n      name,\n      email,\n      password\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response2;\n    throw new Error(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || \"Registration failed\");\n  }\n};\nexport const logout = () => {\n  localStorage.removeItem(\"token\"); // Remove token from localStorage\n};\nexport const getToken = () => {\n  return localStorage.getItem(\"token\"); // Get token from localStorage\n};","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_BACKEND_URL","login","email","password","response","post","data","token","localStorage","setItem","error","_error$response","Error","register","name","_error$response2","logout","removeItem","getToken","getItem"],"sources":["C:/Users/Mariya Zolovska/OneDrive/Desktop/finance-app-frontend/src/services/authService.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\nconst API_URL = `${process.env.REACT_APP_BACKEND_URL}/api/v1/auth`; // Adjust if backend runs on another port\r\n\r\nexport const login = async (email, password) => {\r\n  try {\r\n    const response = await axios.post(`${API_URL}/login`, { email, password });\r\n    if (response.data.token) {\r\n      localStorage.setItem(\"token\", response.data.token); // Store JWT token\r\n    }\r\n    return response.data;\r\n  } catch (error) {\r\n    throw new Error(error.response?.data || \"Login failed\");\r\n  }\r\n};\r\n\r\nexport const register = async (name, email, password) => {\r\n  try {\r\n    const response = await axios.post(`${API_URL}/register`, {\r\n      name,\r\n      email,\r\n      password,\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    throw new Error(error.response?.data || \"Registration failed\");\r\n  }\r\n};\r\n\r\nexport const logout = () => {\r\n  localStorage.removeItem(\"token\"); // Remove token from localStorage\r\n};\r\n\r\nexport const getToken = () => {\r\n  return localStorage.getItem(\"token\"); // Get token from localStorage\r\n};\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,GAAGC,OAAO,CAACC,GAAG,CAACC,qBAAqB,cAAc,CAAC,CAAC;;AAEpE,OAAO,MAAMC,KAAK,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;EAC9C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMR,KAAK,CAACS,IAAI,CAAC,GAAGR,OAAO,QAAQ,EAAE;MAAEK,KAAK;MAAEC;IAAS,CAAC,CAAC;IAC1E,IAAIC,QAAQ,CAACE,IAAI,CAACC,KAAK,EAAE;MACvBC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEL,QAAQ,CAACE,IAAI,CAACC,KAAK,CAAC,CAAC,CAAC;IACtD;IACA,OAAOH,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOI,KAAK,EAAE;IAAA,IAAAC,eAAA;IACd,MAAM,IAAIC,KAAK,CAAC,EAAAD,eAAA,GAAAD,KAAK,CAACN,QAAQ,cAAAO,eAAA,uBAAdA,eAAA,CAAgBL,IAAI,KAAI,cAAc,CAAC;EACzD;AACF,CAAC;AAED,OAAO,MAAMO,QAAQ,GAAG,MAAAA,CAAOC,IAAI,EAAEZ,KAAK,EAAEC,QAAQ,KAAK;EACvD,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMR,KAAK,CAACS,IAAI,CAAC,GAAGR,OAAO,WAAW,EAAE;MACvDiB,IAAI;MACJZ,KAAK;MACLC;IACF,CAAC,CAAC;IACF,OAAOC,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOI,KAAK,EAAE;IAAA,IAAAK,gBAAA;IACd,MAAM,IAAIH,KAAK,CAAC,EAAAG,gBAAA,GAAAL,KAAK,CAACN,QAAQ,cAAAW,gBAAA,uBAAdA,gBAAA,CAAgBT,IAAI,KAAI,qBAAqB,CAAC;EAChE;AACF,CAAC;AAED,OAAO,MAAMU,MAAM,GAAGA,CAAA,KAAM;EAC1BR,YAAY,CAACS,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC;AACpC,CAAC;AAED,OAAO,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAC5B,OAAOV,YAAY,CAACW,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;AACxC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}