{"ast":null,"code":"var _s = $RefreshSig$();\n// hooks/useRecords.js\nimport { useState, useEffect } from \"react\";\nimport { getExpensesForCategory, createExpenseForCategory, deleteExpenseForCategory, updateExpenseForCategory } from \"../services/expenseService\";\nimport { getIncomesForCategory, createIncomeForCategory, deleteIncomeForCategory, updateIncomeForCategory } from \"../services/incomeService\";\nconst useRecords = (userId, categoryId, categoryType) => {\n  _s();\n  const [records, setRecords] = useState([]);\n  const [currentTotal, setCurrentTotal] = useState(0);\n  useEffect(() => {\n    if (!userId || !categoryId) return;\n    const fetchRecords = async () => {\n      try {\n        let data;\n        if (categoryType && categoryType.toUpperCase() === \"INCOME\") {\n          data = await getIncomesForCategory(userId, categoryId);\n        } else {\n          data = await getExpensesForCategory(userId, categoryId);\n        }\n        setRecords(Array.isArray(data) ? data : []);\n      } catch (error) {\n        console.error(\"Erreur lors de la récupération des records :\", error);\n      }\n    };\n    fetchRecords();\n  }, [userId, categoryId, categoryType]);\n  useEffect(() => {\n    const total = records.reduce((acc, record) => {\n      const value = parseFloat(record.amount || record.montant || 0);\n      return acc + value;\n    }, 0);\n    setCurrentTotal(total);\n  }, [records]);\n  const addRecord = async recordData => {\n    if (!recordData.description || !recordData.amount || !categoryId) {\n      return;\n    }\n    recordData = {\n      description: recordData.description,\n      amount: recordData.amount,\n      expenseDate: recordData.expenseDate,\n      userId: userId,\n      categoryId: categoryId\n\n      // userId and categoryId are already handled in the hook\n    };\n    console.log(\"userId:\", userId);\n    console.log(\"categoryId:\", categoryId);\n    console.log(\"categoryType:\", categoryType);\n    console.log(\"recordData:\", recordData);\n    try {\n      let created;\n      if ((categoryType === null || categoryType === void 0 ? void 0 : categoryType.toUpperCase()) === \"INCOME\") {\n        // Ensure incomeDate is included in recordData\n        created = await createIncomeForCategory(userId, categoryId, recordData);\n      } else {\n        // Ensure expenseDate is included in recordData\n        created = await createExpenseForCategory(userId, categoryId, recordData);\n      }\n      setRecords([...records, created]);\n    } catch (error) {\n      console.error(\"Erreur lors de la création du record :\", error);\n    }\n  };\n  const handleDeleteRecord = async recordId => {\n    try {\n      if (categoryType && categoryType.toUpperCase() === \"INCOME\") {\n        await deleteIncomeForCategory(userId, categoryId, recordId);\n      } else {\n        await deleteExpenseForCategory(userId, categoryId, recordId);\n      }\n      setRecords(prev => prev.filter(rec => rec.id !== recordId));\n    } catch (error) {\n      console.error(\"Erreur lors de la suppression du record :\", error);\n    }\n  };\n  const handleEditRecord = async (recordId, updatedData) => {\n    try {\n      let updatedRecord;\n      if (categoryType && categoryType.toUpperCase() === \"INCOME\") {\n        updatedRecord = await updateIncomeForCategory(userId, categoryId, recordId, updatedData);\n      } else {\n        updatedRecord = await updateExpenseForCategory(userId, categoryId, recordId, updatedData);\n      }\n      setRecords(prev => prev.map(rec => rec.id === recordId ? updatedRecord : rec));\n    } catch (error) {\n      console.error(\"Erreur lors de la modification du record :\", error);\n    }\n  };\n  return {\n    records,\n    currentTotal,\n    addRecord,\n    handleDeleteRecord,\n    handleEditRecord\n  };\n};\n_s(useRecords, \"Uj6KR2EpnJ4OGOChSm4yzh9RExg=\");\nexport default useRecords;","map":{"version":3,"names":["useState","useEffect","getExpensesForCategory","createExpenseForCategory","deleteExpenseForCategory","updateExpenseForCategory","getIncomesForCategory","createIncomeForCategory","deleteIncomeForCategory","updateIncomeForCategory","useRecords","userId","categoryId","categoryType","_s","records","setRecords","currentTotal","setCurrentTotal","fetchRecords","data","toUpperCase","Array","isArray","error","console","total","reduce","acc","record","value","parseFloat","amount","montant","addRecord","recordData","description","expenseDate","log","created","handleDeleteRecord","recordId","prev","filter","rec","id","handleEditRecord","updatedData","updatedRecord","map"],"sources":["C:/Users/Mariya Zolovska/OneDrive/Desktop/finance-app-frontend/src/hooks/useRecords.js"],"sourcesContent":["// hooks/useRecords.js\r\nimport { useState, useEffect } from \"react\";\r\nimport {\r\n  getExpensesForCategory,\r\n  createExpenseForCategory,\r\n  deleteExpenseForCategory,\r\n  updateExpenseForCategory,\r\n} from \"../services/expenseService\";\r\nimport {\r\n  getIncomesForCategory,\r\n  createIncomeForCategory,\r\n  deleteIncomeForCategory,\r\n  updateIncomeForCategory,\r\n} from \"../services/incomeService\";\r\n\r\nconst useRecords = (userId, categoryId, categoryType) => {\r\n  const [records, setRecords] = useState([]);\r\n  const [currentTotal, setCurrentTotal] = useState(0);\r\n\r\n  useEffect(() => {\r\n    if (!userId || !categoryId) return;\r\n    const fetchRecords = async () => {\r\n      try {\r\n        let data;\r\n        if (categoryType && categoryType.toUpperCase() === \"INCOME\") {\r\n          data = await getIncomesForCategory(userId, categoryId);\r\n        } else {\r\n          data = await getExpensesForCategory(userId, categoryId);\r\n        }\r\n        setRecords(Array.isArray(data) ? data : []);\r\n      } catch (error) {\r\n        console.error(\"Erreur lors de la récupération des records :\", error);\r\n      }\r\n    };\r\n    fetchRecords();\r\n  }, [userId, categoryId, categoryType]);\r\n\r\n  useEffect(() => {\r\n    const total = records.reduce((acc, record) => {\r\n      const value = parseFloat(record.amount || record.montant || 0);\r\n      return acc + value;\r\n    }, 0);\r\n    setCurrentTotal(total);\r\n  }, [records]);\r\n\r\n  const addRecord = async (recordData) => {\r\n    if (!recordData.description || !recordData.amount || !categoryId) {\r\n      return;\r\n    }\r\n\r\n    recordData = {\r\n      description: recordData.description,\r\n      amount: recordData.amount,\r\n      expenseDate: recordData.expenseDate,\r\n      userId: userId,\r\n      categoryId: categoryId,\r\n\r\n      // userId and categoryId are already handled in the hook\r\n    };\r\n\r\n    console.log(\"userId:\", userId);\r\n    console.log(\"categoryId:\", categoryId);\r\n    console.log(\"categoryType:\", categoryType);\r\n    console.log(\"recordData:\", recordData);\r\n\r\n    try {\r\n      let created;\r\n      if (categoryType?.toUpperCase() === \"INCOME\") {\r\n        // Ensure incomeDate is included in recordData\r\n        created = await createIncomeForCategory(userId, categoryId, recordData);\r\n      } else {\r\n        // Ensure expenseDate is included in recordData\r\n        created = await createExpenseForCategory(\r\n          userId,\r\n          categoryId,\r\n          recordData\r\n        );\r\n      }\r\n      setRecords([...records, created]);\r\n    } catch (error) {\r\n      console.error(\"Erreur lors de la création du record :\", error);\r\n    }\r\n  };\r\n\r\n  const handleDeleteRecord = async (recordId) => {\r\n    try {\r\n      if (categoryType && categoryType.toUpperCase() === \"INCOME\") {\r\n        await deleteIncomeForCategory(userId, categoryId, recordId);\r\n      } else {\r\n        await deleteExpenseForCategory(userId, categoryId, recordId);\r\n      }\r\n      setRecords((prev) => prev.filter((rec) => rec.id !== recordId));\r\n    } catch (error) {\r\n      console.error(\"Erreur lors de la suppression du record :\", error);\r\n    }\r\n  };\r\n\r\n  const handleEditRecord = async (recordId, updatedData) => {\r\n    try {\r\n      let updatedRecord;\r\n      if (categoryType && categoryType.toUpperCase() === \"INCOME\") {\r\n        updatedRecord = await updateIncomeForCategory(\r\n          userId,\r\n          categoryId,\r\n          recordId,\r\n          updatedData\r\n        );\r\n      } else {\r\n        updatedRecord = await updateExpenseForCategory(\r\n          userId,\r\n          categoryId,\r\n          recordId,\r\n          updatedData\r\n        );\r\n      }\r\n      setRecords((prev) =>\r\n        prev.map((rec) => (rec.id === recordId ? updatedRecord : rec))\r\n      );\r\n    } catch (error) {\r\n      console.error(\"Erreur lors de la modification du record :\", error);\r\n    }\r\n  };\r\n\r\n  return {\r\n    records,\r\n    currentTotal,\r\n    addRecord,\r\n    handleDeleteRecord,\r\n    handleEditRecord,\r\n  };\r\n};\r\n\r\nexport default useRecords;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}