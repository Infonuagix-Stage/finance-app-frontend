{"ast":null,"code":"// services/incomeService.js\nimport axios from \"axios\";\n\n// Création d'une instance Axios avec la base URL de votre API\nconst api = axios.create({\n  baseURL: `${process.env.REACT_APP_BACKEND_URL}/api/v1`,\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n});\n\n// Ajout d'un intercepteur pour inclure le token dans l'en-tête\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem(\"token\");\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => Promise.reject(error));\n\n// Modification ici pour appeler l'endpoint qui renvoie la liste complète des entrés\nexport const getIncomesForCategory = async (userId, categoryId) => {\n  const response = await api.get(`/users/${userId}/categories/${categoryId}/incomes`);\n  return response.data;\n};\nexport const createIncomeForCategory = async (userId, categoryId, income) => {\n  const response = await api.post(`/users/${userId}/categories/${categoryId}/incomes`, income, {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  return response.data;\n};\nexport const deleteIncomeForCategory = async (userId, categoryId, incomeId) => {\n  const response = await api.delete(`/users/${userId}/categories/${categoryId}/incomes/${incomeId}`);\n  return response.data;\n};\nexport const updateIncomeForCategory = async (userId, categoryId, incomeId, updatedIncome) => {\n  const response = await api.put(`/users/${userId}/categories/${categoryId}/incomes/${incomeId}`, updatedIncome, {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  return response.data;\n};","map":{"version":3,"names":["axios","api","create","baseURL","process","env","REACT_APP_BACKEND_URL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","getIncomesForCategory","userId","categoryId","response","get","data","createIncomeForCategory","income","post","deleteIncomeForCategory","incomeId","delete","updateIncomeForCategory","updatedIncome","put"],"sources":["C:/Users/Mariya Zolovska/OneDrive/Desktop/finance-app-frontend/src/services/incomeService.js"],"sourcesContent":["// services/incomeService.js\r\nimport axios from \"axios\";\r\n\r\n// Création d'une instance Axios avec la base URL de votre API\r\nconst api = axios.create({\r\n  baseURL: `${process.env.REACT_APP_BACKEND_URL}/api/v1`,\r\n  headers: {\r\n    \"Content-Type\": \"application/json\",\r\n  },\r\n});\r\n\r\n// Ajout d'un intercepteur pour inclure le token dans l'en-tête\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem(\"token\");\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => Promise.reject(error)\r\n);\r\n\r\n// Modification ici pour appeler l'endpoint qui renvoie la liste complète des entrés\r\nexport const getIncomesForCategory = async (userId, categoryId) => {\r\n  const response = await api.get(\r\n    `/users/${userId}/categories/${categoryId}/incomes`\r\n  );\r\n  return response.data;\r\n};\r\n\r\nexport const createIncomeForCategory = async (userId, categoryId, income) => {\r\n  const response = await api.post(\r\n    `/users/${userId}/categories/${categoryId}/incomes`,\r\n    income,\r\n    {\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n    }\r\n  );\r\n  return response.data;\r\n};\r\n\r\nexport const deleteIncomeForCategory = async (userId, categoryId, incomeId) => {\r\n  const response = await api.delete(\r\n    `/users/${userId}/categories/${categoryId}/incomes/${incomeId}`\r\n  );\r\n  return response.data;\r\n};\r\n\r\nexport const updateIncomeForCategory = async (\r\n  userId,\r\n  categoryId,\r\n  incomeId,\r\n  updatedIncome\r\n) => {\r\n  const response = await api.put(\r\n    `/users/${userId}/categories/${categoryId}/incomes/${incomeId}`,\r\n    updatedIncome,\r\n    {\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n    }\r\n  );\r\n  return response.data;\r\n};\r\n"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACvBC,OAAO,EAAE,GAAGC,OAAO,CAACC,GAAG,CAACC,qBAAqB,SAAS;EACtDC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAN,GAAG,CAACO,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EACV,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAACQ,aAAa,GAAG,UAAUH,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,EACAK,KAAK,IAAKC,OAAO,CAACC,MAAM,CAACF,KAAK,CACjC,CAAC;;AAED;AACA,OAAO,MAAMG,qBAAqB,GAAG,MAAAA,CAAOC,MAAM,EAAEC,UAAU,KAAK;EACjE,MAAMC,QAAQ,GAAG,MAAMrB,GAAG,CAACsB,GAAG,CAC5B,UAAUH,MAAM,eAAeC,UAAU,UAC3C,CAAC;EACD,OAAOC,QAAQ,CAACE,IAAI;AACtB,CAAC;AAED,OAAO,MAAMC,uBAAuB,GAAG,MAAAA,CAAOL,MAAM,EAAEC,UAAU,EAAEK,MAAM,KAAK;EAC3E,MAAMJ,QAAQ,GAAG,MAAMrB,GAAG,CAAC0B,IAAI,CAC7B,UAAUP,MAAM,eAAeC,UAAU,UAAU,EACnDK,MAAM,EACN;IACEnB,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB;EAChD,CACF,CAAC;EACD,OAAOe,QAAQ,CAACE,IAAI;AACtB,CAAC;AAED,OAAO,MAAMI,uBAAuB,GAAG,MAAAA,CAAOR,MAAM,EAAEC,UAAU,EAAEQ,QAAQ,KAAK;EAC7E,MAAMP,QAAQ,GAAG,MAAMrB,GAAG,CAAC6B,MAAM,CAC/B,UAAUV,MAAM,eAAeC,UAAU,YAAYQ,QAAQ,EAC/D,CAAC;EACD,OAAOP,QAAQ,CAACE,IAAI;AACtB,CAAC;AAED,OAAO,MAAMO,uBAAuB,GAAG,MAAAA,CACrCX,MAAM,EACNC,UAAU,EACVQ,QAAQ,EACRG,aAAa,KACV;EACH,MAAMV,QAAQ,GAAG,MAAMrB,GAAG,CAACgC,GAAG,CAC5B,UAAUb,MAAM,eAAeC,UAAU,YAAYQ,QAAQ,EAAE,EAC/DG,aAAa,EACb;IACEzB,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB;EAChD,CACF,CAAC;EACD,OAAOe,QAAQ,CAACE,IAAI;AACtB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}