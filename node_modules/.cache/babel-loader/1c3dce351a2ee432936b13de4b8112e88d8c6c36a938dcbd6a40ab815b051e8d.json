{"ast":null,"code":"// Calculate monthly contribution based on project details\nexport const calculateMonthlyContribution = (targetAmount, savedAmount, deadline) => {\n  // Ensure at least 1 month for calculation\n  const monthsRemaining = Math.max(1, Math.ceil((new Date(deadline) - new Date()) / (1000 * 60 * 60 * 24 * 30)));\n\n  // Calculate monthly contribution\n  return (targetAmount - savedAmount) / monthsRemaining;\n};\n\n// Calculate project progress percentage\nexport const calculateProjectProgress = (savedAmount, targetAmount) => {\n  return Math.min(savedAmount / targetAmount * 100, 100);\n};\n\n// Determine project status based on deadline and current savings\nexport const determineProjectStatus = (savedAmount, targetAmount, deadline) => {\n  const today = new Date();\n  const projectDeadline = new Date(deadline);\n  const progress = calculateProjectProgress(savedAmount, targetAmount);\n  if (progress >= 100) return \"Completed\";\n  if (projectDeadline < today) return \"Overdue\";\n  if (progress >= 75) return \"On Track\";\n  if (progress >= 50) return \"Needs Attention\";\n  return \"Behind Schedule\";\n};","map":{"version":3,"names":["calculateMonthlyContribution","targetAmount","savedAmount","deadline","monthsRemaining","Math","max","ceil","Date","calculateProjectProgress","min","determineProjectStatus","today","projectDeadline","progress"],"sources":["C:/Users/Mariya Zolovska/OneDrive/Desktop/finance-app-frontend/src/utils/projectCalculations.js"],"sourcesContent":["// Calculate monthly contribution based on project details\r\nexport const calculateMonthlyContribution = (\r\n  targetAmount,\r\n  savedAmount,\r\n  deadline\r\n) => {\r\n  // Ensure at least 1 month for calculation\r\n  const monthsRemaining = Math.max(\r\n    1,\r\n    Math.ceil((new Date(deadline) - new Date()) / (1000 * 60 * 60 * 24 * 30))\r\n  );\r\n\r\n  // Calculate monthly contribution\r\n  return (targetAmount - savedAmount) / monthsRemaining;\r\n};\r\n\r\n// Calculate project progress percentage\r\nexport const calculateProjectProgress = (savedAmount, targetAmount) => {\r\n  return Math.min((savedAmount / targetAmount) * 100, 100);\r\n};\r\n\r\n// Determine project status based on deadline and current savings\r\nexport const determineProjectStatus = (savedAmount, targetAmount, deadline) => {\r\n  const today = new Date();\r\n  const projectDeadline = new Date(deadline);\r\n  const progress = calculateProjectProgress(savedAmount, targetAmount);\r\n\r\n  if (progress >= 100) return \"Completed\";\r\n  if (projectDeadline < today) return \"Overdue\";\r\n  if (progress >= 75) return \"On Track\";\r\n  if (progress >= 50) return \"Needs Attention\";\r\n  return \"Behind Schedule\";\r\n};\r\n"],"mappings":"AAAA;AACA,OAAO,MAAMA,4BAA4B,GAAGA,CAC1CC,YAAY,EACZC,WAAW,EACXC,QAAQ,KACL;EACH;EACA,MAAMC,eAAe,GAAGC,IAAI,CAACC,GAAG,CAC9B,CAAC,EACDD,IAAI,CAACE,IAAI,CAAC,CAAC,IAAIC,IAAI,CAACL,QAAQ,CAAC,GAAG,IAAIK,IAAI,CAAC,CAAC,KAAK,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAC1E,CAAC;;EAED;EACA,OAAO,CAACP,YAAY,GAAGC,WAAW,IAAIE,eAAe;AACvD,CAAC;;AAED;AACA,OAAO,MAAMK,wBAAwB,GAAGA,CAACP,WAAW,EAAED,YAAY,KAAK;EACrE,OAAOI,IAAI,CAACK,GAAG,CAAER,WAAW,GAAGD,YAAY,GAAI,GAAG,EAAE,GAAG,CAAC;AAC1D,CAAC;;AAED;AACA,OAAO,MAAMU,sBAAsB,GAAGA,CAACT,WAAW,EAAED,YAAY,EAAEE,QAAQ,KAAK;EAC7E,MAAMS,KAAK,GAAG,IAAIJ,IAAI,CAAC,CAAC;EACxB,MAAMK,eAAe,GAAG,IAAIL,IAAI,CAACL,QAAQ,CAAC;EAC1C,MAAMW,QAAQ,GAAGL,wBAAwB,CAACP,WAAW,EAAED,YAAY,CAAC;EAEpE,IAAIa,QAAQ,IAAI,GAAG,EAAE,OAAO,WAAW;EACvC,IAAID,eAAe,GAAGD,KAAK,EAAE,OAAO,SAAS;EAC7C,IAAIE,QAAQ,IAAI,EAAE,EAAE,OAAO,UAAU;EACrC,IAAIA,QAAQ,IAAI,EAAE,EAAE,OAAO,iBAAiB;EAC5C,OAAO,iBAAiB;AAC1B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}